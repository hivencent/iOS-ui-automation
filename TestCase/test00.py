# coding=utf-8import unittestimport osfrom time import sleepfrom appium import webdriverimport public.methods as timport public.case_xls as xlclass IOSSDK(unittest.TestCase,t.Methods,xl.Case_xls):	u'''游客登录'''	def setUp(self):		self.driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', self.desired_caps())		self.case_id = self.get_col(0,0)  # case id 列		self.preset = self.get_col(0,2)  # 预置条件列		self.using = self.get_col(0,5)  # 查找元素方式列		self.value = self.get_col(0,6)  # 元素列		self.exp = self.get_col(0,7)  # 预期结果列		self.driver.implicitly_wait(10)	def tearDown(self):		self.driver.quit()	def test_001(self):		u'''游客登录'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[1],self.value[1]).click() #游客登录		sleep(5)		ele = self.element(self.driver,self.using[2],self.value[2])		print unicode('测试结果: %s' % ele.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[1].encode('utf-8'))		self.dy_Equal(self.driver,unicode(ele.text),self.exp[1],self.case_id[1])  #断言	def test_002(self):		u'''游客登陆，进入游戏'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[3],self.value[3]).click() #游客登录		sleep(5)		self.element(self.driver,self.using[4],self.value[4]).click() #进入游戏		sleep(5)		el = self.element_or_none(self.driver,self.using[5],self.value[5]) #绑定手机按钮,预期找不到。返回None		print unicode('测试结果: %s' % el)		print unicode('预期结果: %s' % self.exp[3].encode('utf-8'))		self.dy_IsNone(self.driver,el,self.case_id[3]) #断言未None	def test_003(self):		u'''游客登陆，绑定手机,手机号输入为空'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[6], self.value[6]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[7], self.value[7]).click()  #绑定手机		for i in xrange(10):			self.element(self.driver,self.using[8], self.value[8]).click()  #获取验证码			el = self.element(self.driver,self.using[9],self.value[9])      #提示语			if el.text != None:				break		print unicode('测试结果: %s' % el.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[6].encode('utf-8'))		self.dy_Equal(self.driver,unicode(el.text),self.exp[6],self.case_id[6])  #断言	def test_004(self):		u'''游客登陆，绑定手机,手机号输入为10位'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[10], self.value[10]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[11], self.value[11]).click()  # 绑定手机		for i in range(10):			el = self.element(self.driver,self.using[12], self.value[12])  # 手机号输入框			el.clear()                                                #清空			el.send_keys(self.preset[12].encode('utf-8').decode("utf-8")) #输入			el2 = self.element(self.driver,self.using[12], self.value[12]) #重新获取该元素			if el2.text == self.preset[12]:  #判断输入的与 预置是否一致				break			else:				el.clear()		for i in xrange(10):			self.element(self.driver,self.using[13],self.value[13]).click()  #验证码			el3 = self.element(self.driver,self.using[14],self.value[14])    #提示语			if el3.text != None:				break		print unicode('测试结果: %s' % el3.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[10].encode('utf-8'))		self.dy_Equal(self.driver, unicode(el3.text), self.exp[10], self.case_id[10])  # 断言'''	def test_005(self):		u'''游客登陆，绑定手机,手机号输入为12位'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[15], self.value[15]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[16], self.value[16]).click()  # 绑定手机		for i in range(10):			el = self.element(self.driver,self.using[17], self.value[17])  # 手机号输入框			el.clear()  # 清空			el.send_keys(self.preset[17].encode('utf-8').decode("utf-8"))  # 输入			el2 = self.element(self.driver,self.using[17], self.value[17])    # 重新获取该元素			if el2.text == self.preset[17]:          # 判断输入的与 预置是否一致				break			else:				el.clear()		for i in xrange(10):			self.element(self.driver,self.using[18], self.value[18]).click()  # 验证码			el3 = self.element(self.driver,self.using[19], self.value[19])  # 提示语			if el3.text != None:				break		print unicode('测试结果: %s' % el3.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[15].encode('utf-8'))		self.dy_Equal(self.driver, unicode(el3.text), self.exp[15], self.case_id[15])  # 断言	def test_006(self):		u'''游客登陆，绑定手机,手机号输入为11位'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[20], self.value[20]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[21], self.value[21]).click()  # 绑定手机		for i in range(10):			el = self.element(self.driver,self.using[22], self.value[22])  # 手机号输入框			el.clear()  # 清空			el.send_keys(self.preset[22].encode('utf-8').decode("utf-8"))  # 输入			el2 = self.element(self.driver,self.using[22], self.value[22])  # 重新查找该元素			if el2.text == self.preset[22]:  # 判断输入的与 预置是否一致				break			else:				el.clear()		self.element(self.driver,self.using[23], self.value[23]).click()  # 验证码		el3 = self.element(self.driver,self.using[24], self.value[24])  # 提示语		try:			print unicode('测试结果: %s' % el3.text.encode('utf-8'))			print unicode('预期结果: %s' % self.exp[20].encode('utf-8'))			self.dy_Equal(self.driver, unicode(el3.text), self.exp[20], self.case_id[20])  # 断言		except:			print unicode('测试结果: %s' % el3)			print unicode('预期结果: 元素不为空')			self.dy_IsNotNone(self.driver,el3,self.case_id[20])	def test_007(self):		u'''游客登陆，绑定手机,正确手机号，验证码输入为空'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[25], self.value[25]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[26], self.value[26]).click()  # 绑定手机		for i in range(10):			el = self.element(self.driver,self.using[27], self.value[27])  # 手机号输入框			el.clear()  # 清空			el.send_keys(self.preset[27].encode('utf-8').decode("utf-8"))  # 输入			el2 = self.element(self.driver,self.using[27], self.value[27])  # 重新查找该元素			if el2.text == self.preset[27]:  # 判断输入的与 预置是否一致				break			else:				el.clear()		for i in xrange(10):			self.element(self.driver,self.using[28], self.value[28]).click()  #下一步			el3 = self.element(self.driver,self.using[29], self.value[29])    #提示语			if el3.text != None:				break		print ('测试结果: %s' % el3.text.encode('utf-8'))		print ('预期结果: %s' % self.exp[25].encode('utf-8'))		self.dy_Equal(self.driver, unicode(el3.text), self.exp[25], self.case_id[25])  # 断言	def test_008(self):		u'''游客登陆，绑定手机,正确手机号，输入错误验证码'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[30], self.value[30]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[31], self.value[31]).click()  # 绑定手机		for i in range(10):			el = self.element(self.driver,self.using[32], self.value[32])  # 手机号输入框			el.clear()  # 清空			el.send_keys(self.preset[32].encode('utf-8').decode("utf-8"))  # 输入			el2 = self.element(self.driver,self.using[32], self.value[32])  # 重新查找该元素			if el2.text == self.preset[32]:  # 判断输入的与 预置是否一致				break			else:				el.clear()		el3 = self.element(self.driver,self.using[33],self.value[33])         #验证码输入框		el3.send_keys(self.preset[33].encode('utf-8').decode("utf-8"))      #输入		for i in xrange(10):			self.element(self.driver,self.using[34], self.value[34]).click()  # 下一步			el4 = self.element(self.driver,self.using[35], self.value[35])  # 提示语			if el4.text != None:				break		print unicode('测试结果: %s' % el4.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[30].encode('utf-8'))		self.dy_Equal(self.driver, unicode(el4.text), self.exp[30], self.case_id[30])  # 断言	def test_009(self):		u'''游客登陆，绑定手机,返回'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[36], self.value[36]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[37], self.value[37]).click()  # 绑定手机		self.element(self.driver,self.using[38],self.value[38]).click()   #返回按钮		el = self.element(self.driver,self.using[39],self.value[39])      #提示语		print unicode('测试结果: %s' % el.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[36].encode('utf-8'))		self.dy_Equal(self.driver, unicode(el.text), self.exp[36], self.case_id[36])  # 断言	def test_010(self):		u'''游客登陆，绑定手机,输入已绑定手机号'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[40], self.value[40]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[41], self.value[41]).click()  # 绑定手机		for i in range(10):			el = self.element(self.driver,self.using[42], self.value[42])  # 手机号输入框			el.clear()  # 清空			el.send_keys(self.preset[42].encode('utf-8').decode("utf-8"))  # 输入			el2 = self.element(self.driver,self.using[42], self.value[42])  # 重新查找该元素			if el2.text == self.preset[42]:  # 判断输入的与 预置是否一致				break			else:				el.clear()		for i in xrange(10):			self.element(self.driver,self.using[43], self.value[43]).click()  # 验证码			el3 = self.element(self.driver,self.using[44], self.value[44])  # 提示语			if el3.text != None:				break		print unicode('测试结果: %s' % el3.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[40].encode('utf-8'))		self.dy_Equal(self.driver, unicode(el3.text), self.exp[40], self.case_id[40])  # 断言	def test_011(self):		u'''游客登陆，绑定手机,正确手机号，输入过期验证码'''		try:			self.element(self.driver,'name', '显示登录UI').click()		except:pass		self.element(self.driver,self.using[45], self.value[45]).click()  # 游客登录		sleep(5)		self.element(self.driver,self.using[46], self.value[46]).click()  # 绑定手机		for i in range(10):			el = self.element(self.driver,self.using[47], self.value[47])  # 手机号输入框			el.clear()  # 清空			el.send_keys(self.preset[47].encode('utf-8').decode("utf-8"))  # 输入			el2 = self.element(self.driver,self.using[47], self.value[47])  # 重新查找该元素			if el2.text == self.preset[47]:  # 判断输入的与 预置是否一致				break			else:				el.clear()		el3 = self.element(self.driver,self.using[48],self.value[48])         #验证码输入框		el3.send_keys(self.preset[48].encode('utf-8').decode("utf-8"))      #输入		for i in xrange(10):			self.element(self.driver,self.using[49], self.value[49]).click()  # 下一步			el4 = self.element(self.driver,self.using[50], self.value[50])  # 提示语			if el4.text != None:				break		print unicode('测试结果: %s' % el4.text.encode('utf-8'))		print unicode('预期结果: %s' % self.exp[45].encode('utf-8'))		self.dy_Equal(self.driver, unicode(el4.text), self.exp[45], self.case_id[45])  # 断言if __name__ == '__main__':	unittest.main()